module Tutorial1 where

import PicturesSVG -- needed for the optional chess part
import Test.QuickCheck

-- Exercise 1
{-
a) 7
b) yes it does
c) length = 17
d) reverses the whole string
-}

-- Exercise 2:
{-
d.1) 42
d.2) double :: Int -> Int
d.3) double 21 :: Int
e) <interactive>:6:8: error: Variable not in scope: three :: Int
-}

double :: Int -> Int
double x = x + x

square :: Int -> Int
square x = x * x

-- Exercise 3:

-- b) tests confirm it is working

isTriple :: Int -> Int -> Int -> Bool
isTriple a b c = a^2 + b^2 == c^2

-- Exercise 4:

-- b) yup, they seem to be valid

leg1 :: Int -> Int -> Int
leg1 x y = (x * x) - (y * y)

leg2 :: Int -> Int -> Int
leg2 x y = 2 * x * y

hyp :: Int -> Int -> Int
hyp x y = (x * x) + (y * y)

-- Exercise 5:

-- it checks if the function isTriple works properly for any Pythagorean triple generated by the formula from Exercise 4
-- it expects two integers, which are inserted into the Pythagorean triple formula functions and if it works properly, it should return True
-- I expect to always get True - if it passes QuickCheck, it will confirm my expectation - and it did

prop_triple :: Int -> Int -> Bool
prop_triple x y = isTriple (leg1 x y) (leg2 x y) (hyp x y)

-- Exercise 7:

pic1 :: Picture
pic1 = beside (above knight (invert knight)) (above (invert knight) knight)

pic2 :: Picture
pic2 = beside (above knight (flipV (invert knight))) (above (invert knight) (flipV knight))

-- Functions --

twoBeside :: Picture -> Picture
twoBeside x = beside x (invert x)

-- Exercise 8:

twoAbove :: Picture -> Picture
twoAbove x = above x (invert x)

fourPictures :: Picture -> Picture
fourPictures x = above (twoBeside x) (invert (twoBeside x))

-- Exercise 9:
-- a)
whiteBlack :: Picture
whiteBlack = beside whiteSquare blackSquare

emptyRow :: Picture
emptyRow = repeatH 4 whiteBlack

-- b)

otherEmptyRow :: Picture
otherEmptyRow = flipV emptyRow

-- c)

middleBoard :: Picture
middleBoard = above (above emptyRow otherEmptyRow) (above emptyRow otherEmptyRow)

-- d)

squad :: Picture
squad = beside (trio1) (beside pair trio2)
 where
    trio2 = beside (beside bishop knight) rook
    trio1 = beside (beside rook knight) bishop
    pair = beside queen king

whiteRow :: Picture
whiteRow = over squad otherEmptyRow

blackRow :: Picture
blackRow = over (invert squad) emptyRow

-- e)

blackPawnRow :: Picture
blackPawnRow = over blackPawns otherEmptyRow
 where
    blackPawns = repeatH 8 (invert pawn)

whitePawnRow :: Picture
whitePawnRow = over whitePawns emptyRow
 where
    whitePawns = repeatH 8 pawn

populatedBoard :: Picture
populatedBoard = above (above (above blackRow blackPawnRow) middleBoard) (above whitePawnRow whiteRow)
